{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","api/todos.ts","components/NewToDo/NewToDo.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","id","completed","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","NewToDo","onSubmit","useState","setTitle","setUserId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","Math","max","todosFromServer","maxId","setMaxId","action","method","event","preventDefault","currentId","htmlFor","type","placeholder","value","onChange","cleanedValue","target","replace","disabled","users","App","updatedTodos","setUpdatedTodos","toDo","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8faaf8bc.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Prps {\n  user: {\n    email: string;\n    name: string;\n  }\n}\n\nexport const UserInfo: React.FC<Prps> = ({ user: { email, name } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { User } from '../../services/interfaces';\n\ninterface Props {\n  todo: {\n    title: string;\n    id: number,\n    completed: boolean;\n    user: User | null;\n  }\n}\n\nexport const TodoInfo: React.FC<Props> = (\n  {\n    todo: {\n      title, id, completed, user,\n    },\n  },\n) => (\n  <article\n    data-id={id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{title}</h2>\n\n    {user && (\n      <UserInfo user={user} />\n    )}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { ToDo } from '../../services/interfaces';\n\ninterface Props {\n  todos: ToDo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\nimport { User } from './interfaces';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId)\n      || null;\n}\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport users from '../../api/users';\nimport { getUserById } from '../../services/user';\nimport { ToDo } from '../../services/interfaces';\nimport todosFromServer from '../../api/todos';\n\ninterface Props {\n  onSubmit: (toDo: ToDo) => void;\n}\n\nexport const NewToDo: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const [maxId, setMaxId] = useState<number>(Math.max(\n    ...todosFromServer.map(todo => todo.id),\n  ));\n\n  function handleTitleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const inputValue = event.target.value;\n    const cleanedValue = inputValue.replace(/[^a-zA-Za-яА-Я0-9\\s]/g, '');\n\n    setTitle(cleanedValue);\n    setHasTitleError(false);\n  }\n\n  function handleUserIdChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  }\n\n  function reset() {\n    setTitle('');\n    setUserId(0);\n  }\n\n  function handlerSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      title,\n      id: maxId + 1,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    });\n\n    setMaxId(currentId => currentId + 1);\n    reset();\n  }\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handlerSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"title-input\">Title: </label>\n\n        <input\n          id=\"title-input\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-select\">User: </label>\n\n        <select\n          id=\"user-select\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {users.map(user => {\n            return (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            );\n          })}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { NewToDo } from './components/NewToDo/NewToDo';\n\nimport { ToDo } from './services/interfaces';\nimport { getUserById } from './services/user';\n\nimport todosFromServer from './api/todos';\n\nexport const todos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [updatedTodos, setUpdatedTodos] = useState(todos);\n\n  function addNewTodo(newTodo: ToDo) {\n    setUpdatedTodos(currentTodos => [...currentTodos, newTodo]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <NewToDo onSubmit={(toDo: ToDo) => addNewTodo(toDo)} />\n      <TodoList todos={updatedTodos} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}